
### INSTALL/Upgrade DOCKER 

# sudo su -

# sudo vi /etc/docker/daemon.json

Press i and insert below content

{
	"exec-opts": ["native.cgroupdriver=systemd"]
}


Save the file. (:wq!)

sudo service docker restart



Step 2: 


##### Initiate Kube cluster

sudo kubeadm init --ignore-preflight-errors=all

Step 4:

#### Setup the environment Variables

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config


Step 5:
## set up the  Calico network

sudo kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/calico.yaml


Step 6:

#### check if Kube Master is ready or not

# kubectl get nodes


For your pod to be scheduled in your master node, remove the taint


# kubectl taint node <nodeIP> node-role.kubernetes.io/master:NoSchedule-

Example like this:

# kubectl taint node ip-172-31-24-116 node-role.kubernetes.io/master:NoSchedule-

===============================================
Create a pod on the node
===============================

# mkdir mykubefiles
# cd mykubefiles
# vim pod-defintion.yml

kind: Pod
apiVersion: v1
metadata:
 name: pod1
 labels:
  author: sonal
  app: webserver
spec:
 containers:
  - name: c1
    image: nginx


Save the file and run it

# kubectl create -f pod-defintion.yml

# kubectl get pods

# kubectl describe pod pod1

Deployment object in kubernetes:
====================================

# vim deployment.yml

kind: Deployment
apiVersion: apps/v1
metadata:
 name: mydeploy
spec:
 replicas: 4 # replicas == desired pods
 selector: # it is a query to see how many pods are running with the matching label 
   matchLabels:
    app: kubeserve
 template: # this is pod template to cretae 4 replicas
  metadata:
   labels:
    app: kubeserve   # labels are used to select same pods
  spec:
   containers:
    - name: c1
      image: leaddevops/kubeserve:v1


# kubectl create -f deployment.yml

# kubectl get all

# kubectl get deployment

Scale up and scale down replicas

# kubectl scale deployment mydeploy --replicas=6

# kubectl get all

# kubectl get deployment

Scale down


# kubectl scale deployment mydeploy --replicas=2

# kubectl get all

# kubectl get deployment

Service obkject --> to access application from the browser of your machine

# vim service.yml

kind: Service
apiVersion: v1
metadata: 
 name: mysvc
spec:
 type: NodePort
 ports:
  - targetPort: 80  # container port
    port: 80    # service port --> this port will forward user request to pods
 selector:
  app: kubeserve

Save the file

# kubectl create -f service.yml

# kubectl get service

copy the node port -> 5 dight number

go to the browser and give  localhost:<nodeportnumber>

====================================================================
Monitoring tool - ELK
=====================================================================
Deploy spring boot application:
=====================================

In the same folder we have a dockerfile. Let us build it:

# docker build -t springboot .

Create a container with your new Image:

# docker run -d -p 81:8080 -v /var/log/:/var/log/  springboot

Check the container is running:

# docker ps -a --latest

GO to browser:

Localhost:81

===============================================

ELK stack setup:
===================================

$ sudo su -
$ cd

$ git clone https://github.com/Sonal0409/ELKExample.git
$ cd ELKExample

$ docker-compose version

Install docker-compose tool

Docker compose is a tool to be installed on Docker host

sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose --version



$ sysctl -w vm.max_map_count=262144

$ docker-compose up -d
$ docker ps


Browse: http://localhost:5601/app/kibana
















