Docker:
********************************************
Lab already has docker installed

$ sudo su -
$ docker --version

Start the docker engine

$ systemctl start docker

$ systemctl status docker

Docker Images:
*************************

Demo1: Pull Image from docker hub to your local docker host

docker pull imagename

$ docker pull ubuntu

Docker will pull the image with tag as latest from docker hub library

OR

docker pull imagename:tagname

$ docker pull ubuntu:20.04

Will pull ubuntu image of tag 20.04

2. Check the list of  images pulled from docker host

$ docker images

OR

$ docker image ls

3. Search for images:
**************
$ docker search hello-world

4. Delete the images from local docker host
*******************
$ docker rmi ubuntu

$ docker rmi ubuntu:20.04

5. Run an Image to create a container
****************

Docker run Imagename


$ docker run ubuntu

Run command: will first check locally if image ubuntu is available or not

If image is not available locally

RUn command will automatically

> pull image from docker hub
> run the image to launch a container
> user will be inside the container process
> user will not be able to see the host machine cursor


6. See the list of container created

$ docker ps -a


7.  Launch a container from an Image and container should be up & running

When we execute the run command we have to mention in which mode we want to launch the container

Foreground mode

$ docker run -it imagename

-i : interactive
-t: terminal

$ docker run -it ubuntu

Container will be launched
Will be up & running
User will be attached to the container
That is , user will be on the container terminal

Whenever you are attached to the terminal of the container, using the following options you will come out of the container:

Ctl pq

User will come out of the container and container will be still up and running

exit

User will come out of the container and container will be exited

Attach to the terminal of the container again:

$ docker attach containerid/containername

Execute exit command to comout of container

User will come out of the container and container will be exited

To start a exited container:

$ docker start containerid/name

To stop a running container

$ docker stop containerid/name


Detached mode (-d)
====================================================

$ docker run -d nginx
$ docker ps -a
$ docker container ls – list containers in running status

Container will be launched
Will be up & running
User will be detached to the container ie: container is running in the background, user can continue working on the host machine

Delete a Container from the host machine

$ docker rm -f containername/conatinerid
$ docker rm -f n1
$ docker ps -a : no container will be there


Attach to the terminal of a web container

========================================

# docker rm -f $(docker ps -aq)

# docker run -d --name web nginx

# docker exec -it web bash

give exit  -> to comeout 

========================================================

Describe all Details of the container created
****************

Inspect is the command that will describe all the details of the container in json format

$ docker inspect containername/id

Port mapping or port forwarding
*****************
By default docker container is ready to be accessed by the user, it is the user internet who cannot reach the container.
Port mapping/port forwarding is  a concept in docker that allows a user to access the container from browser of his machine
Port mapping has to be done at the run time of container
If the container is already running/exited, you cannot do port forwarding
In port forwarding we have to provide mapping between 2 ports
Systemport - any free port on the lab machine
Containerport : port on which container is exposed to. You can get this information from the Image, look for expose keyword on the image in docker hub


Method 1: user defined custom port mapping : 

 -p : this option will perform port mapping

$ docker run –name n2 -d -p Systemport:containerport  nginx

$ docker run –name n2 -d -p 8282:80 nginx
$ docker port n2


Method 2:  docker provided random port mapping : -P

$ docker run -d –name web -P httpd
$ docker port web

In this case user will not provide any port information

Docker will do random free port from host machine and map it to your container port

Access the container OR execute a command on the container from the host machine
=====================================================================
Take a container name which is running and which has port mapping done

$ docker exec -it containername command

$ docker exec -it web bash


Clean up docker host:
************************
Delete  all containers at once

$ docker rm -f $(docker ps -aq)
$ docker rm -f containername

Delete all images:

$ docker system prune –all

Delete all images
 Delete exited container
============================================
Commit a container to an Image:
==========================================

# docker run -it --name cont1 ubuntu

# touch app.war

# mkdir demo

# apt-get update && apt-get install git -y

come out of cotainer using CTRL pq

# docker ps -aq

Commit container to an Image

# docker commit cont1 myimage01

run your custom Image

# docker images

# docker run -it --name cont2 myimage01


===========================================================
Dockerfile
===========================================================
dockerfile or Dockerfile 
It has no extensions
syntax:
keyword argument

keywords are written in uppercase

# is a comment 

FROM : define the name of the docker base Image on which we have to customization 

RUN : we will provide list of Linux commands that will install/upgrade packages on the container 
OR run any linux command 
This keyword is repeated in dockerfile 
The commands that are given with run keyword will be executed and completed when the container is launched.

Label : define the maintainer/author of the dockerfile 

ENV: define variables and give values to them. These variables can be used in the dockerfile 
Example: 
ENV NGINX_VERSION   1.27.1
refer to variable ${NGINX_VERSION}

COPY : copy file from local server to containers directory but it cannot copy .tar files

ADD: copy file from local server to containers directory
and can also copy .tar files.

EXPOSE : exposes the container to a port number 

CMD: a command that will be executed once the container is launched. These commands run to start an application on the container 


# mkdir mydockerfiles

# cd mydockerfiles

# vim dockerfile

# this is first dockerfile

FROM ubuntu
RUN apt-get update
ENV pkg_name nginx
ENV dest /var/www/html/
RUN apt-get install $pkg_name -y
COPY index.html $dest
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


save the file

vim index.html

<h1> file from dockerfile </h1>

Save the file (:wq!)



Build the dockerfile into an Image

# docker build -t mynginx .

Check Image

# docker images

run  the image

# docker run -d -p 8787:80 mynginx

go to browser and give localhost:8787

======================================================

Demo for python dockerfile

# mkdir mypythondeploy
# cd mypythondeploy

# vim app.py

from flask import Flask 
import os 
app = Flask(__name__) 
@app.route('/') 

def hello(): 
    return ('\nHello from Container World! \n\n')

if __name__ == "__main__": 
    app.run(host="0.0.0.0", port=8080, debug=True)


Save the file

# vim dockerfile

FROM ubuntu:20.04
RUN apt update && apt install python3 -y && apt install python3-flask -y
COPY app.py /tmp
EXPOSE 8080
CMD ["python3", "/tmp/app.py"]


save the file

# docker build -t myimage01 .

# docker run -d -P myimage01



















